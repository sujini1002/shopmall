<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="orders">
	
	<select id="getprdInvenList" parameterType="list" resultType="map">
		<![CDATA[
			select pi.no,pi.inventory,p.price
			from product_inventory pi inner join product p
			on pi.prd_no = p.no
			where pi.no in (
		]]>
		<foreach collection="list" item="item" separator=",">
			<![CDATA[
				#{item.prd_no}
			]]>
		</foreach>
		
		<![CDATA[
			)
		]]>
	</select>
	
	<insert id="insertOrder" parameterType="ordervo">
		<selectKey keyProperty="no" resultType="Long" order="AFTER">
			<![CDATA[
				 SELECT currval('seq_order');
			]]>
		</selectKey>
		<![CDATA[
			insert into orders values(
				nextval('seq_order'),
				(select concat(to_char(now(),'YYYYMMDD'),'-',
					(select lpad(cast(count(*)+1 as char) ,7,'0') from orders where to_char(order_date,'YYYY-MM-DD')= to_char(now(),'YYYY-MM-DD')))
				),
				#{member_code},
				#{name},
				#{password},
				#{deliver},
				#{phone},
				#{email},
				#{rev_name},
				#{rev_deliver},
				#{rev_phone},
				#{deliver_price},
				cast(#{status} as enum_order_status),
				now(),
				#{pay_way},
				#{payment}
				
			)
		]]>
	</insert>
	
	<insert id="insertOrderProduct" parameterType="hashmap">
		<![CDATA[
			insert into orders_product values
		]]>
		<foreach collection="orderProductList" item="item" separator=",">
		<![CDATA[
			(
				#{order_no},
				#{item.prd_no},
				#{item.count},
				cast(#{item.status} as enum_ordpro_status),
				#{item.price}
			)
		]]>
		</foreach>
	</insert>
	
	<insert id="insertDeposit" parameterType="map">
	<![CDATA[
		insert into deposit values 
		(#{order_no},#{depositVo.bank},#{depositVo.name},#{depositVo.refund_account})
	]]>
	</insert>
	
	<update id="updateInventory" parameterType="list">
		<foreach collection="list" item="item" separator=";">
		<![CDATA[
			update product_inventory 
			set inventory = inventory - #{item.count}
			where no = #{item.prd_no}
		]]>
		</foreach>
	</update>
	
	<select id="getList" parameterType="map" resultType="map">
		<![CDATA[
			select o.no as order_no,
				   o.order_code as order_code,
				   o.payment as payment,
				   o.pay_way as pay_way, 
				   o.status  as status,
				   (
				   		select distinct(concat(p.title,' 외 ',(select count(*) from orders_product where order_no = o.no),'건'))
						from product_inventory piv join product p
						on piv.prd_no = p.no
						where piv.no = (
												select prd_no 
												from orders_product 
												where order_no = o.no 
												order by prd_no asc 
												limit 1 offset 0 
				                            )
				   )as order_title
			from orders o
		]]>
		<if test="status eq 'none'.toString()">
			<![CDATA[
				where o.password = #{password}
				and o.order_code = #{order_code}
			]]>
		</if>
		<if test="status eq 'member'.toString()">
			<![CDATA[
				where o.member_code= #{member_code}
			]]>
		</if>
		<![CDATA[
			order by o.order_date desc
		]]>
	</select>
	
	<select id="getAllList" resultType="map">
		<![CDATA[
			select o.no as order_no,
				   o.order_code as order_code,
				   o.payment as payment,
				   o.pay_way as pay_way, 
				   o.status  as status,
				   (
				   		select distinct(concat(p.title,'외',(select count(*) from orders_product where order_no = o.no),'건'))
						from product_inventory piv join product p
						on piv.prd_no = p.no
						where piv.no = (
												select prd_no 
												from orders_product 
												where order_no = o.no 
												order by prd_no asc 
												limit 1 offset 0 
				                            )
				   )as order_title,
				   m.id as id,
				   to_char(o.order_date,'YYYY-MM-dd HH:ss') as order_date
			from orders o join member m
			on o.member_code = m.code
			order by o.order_date desc
		]]>
	</select>
	
	
	<select id="getOrder" parameterType="long" resultType="map">
		<![CDATA[
			select op.prd_no as prdInven_no,
				   piv.opt_value as opt_value,
				   p.title as prd_title,
				   pim.url as prd_img,
				   p.price as prd_price,
				   op.status as order_status,
				   to_char(o.order_date,'YYYY-MM-dd') as order_date,
				   o.order_code as order_code,
				   o.payment as order_payment,
				   o.pay_way as order_pay_way,
				   p.no as prd_no
			from orders o join orders_product op 
				 on o.no = op.order_no
				 join product_inventory  piv 
				 on op.prd_no = piv."no"
				 join product p 
				 on piv.prd_no = p."no"
				 join product_img pim
				 on p."no" = pim.prd_no
			where op.order_no = #{_parameter}
			and pim.istitle = true
		]]>
	</select>
	
	<select id="orderStatus" parameterType="long" resultType="int" >
		<![CDATA[
			select count(*)
			from orders o join orders_product op
			on o.no = op.order_no
			where o.no = #{_parameter} and op.order_no = #{_parameter} and 
			(
				o.status not in ('입금전','입금완료','결제완료','상품준비중')
				or op.status not in ('입금전','입금완료','결제완료','상품준비중')
			
			)
			 
		]]>
	</select>
	<select id="orderProductStatus" parameterType="map" resultType="int">
		<![CDATA[
			select count(*)
			from orders_product
			where order_no = #{order_no} and prd_no = #{prd_no}
			and status not in ('입금전','입금완료','결제완료','상품준비중')
		]]>
	</select>
	
	<update id="updateOrders" parameterType="long">
		<![CDATA[
			update orders
			set status = '취소'
			where no = #{_parameter}
		]]>
	</update>
	
	<update id="updateOrderProductAll" parameterType="long">
		<![CDATA[
			update orders_product
			set status = '취소'
			where order_no = #{_parameter}
		]]>
	</update>
	
	<update id="updateOrderProduct" parameterType="map">
		<![CDATA[
			update orders_product
			set status = '취소'
			where order_no = #{order_no}
			and prd_no = #{prd_no}
		]]>
	</update>
	
	<update id="updateOrderStatus" parameterType="long">
		<![CDATA[
			update orders
			set status = '부분취소'
			where no = #{_parameter}
		]]>
	</update>
</mapper>